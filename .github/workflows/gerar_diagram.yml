name: CI/CD - Geração de Artefatos e Versionamento

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Permite acionar manualmente

jobs:
  generate-artifacts:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    # Permissão para o workflow comitar de volta ao repositório
    permissions:
      contents: write # Permite escrever no repositório

    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # Chave da API Gemini acessível a todos os passos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Importante para o versionamento completo do histórico

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # Vai procurar por requirements.txt ou pyproject.toml

      - name: Install system dependencies (Graphviz, Java, PlantUML)
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz default-jre plantuml

      - name: Install Python dependencies (Google Generative AI)
        run: |
          pip install --upgrade pip
          pip install google-generativeai
          # Se você tem um requirements.txt com outras libs, instale aqui
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # O passo "Instalar dependências do projeto" foi consolidado acima para evitar duplicação

      - name: Gerar diagrama de classes com Gemini e PlantUML
        # O script relogio.py fará a chamada à API, gerará o .puml e o .png
        run: python relogio.py

      # Passo Corrigido
      - name: Gerar diagrama de classes sem IA (PlantUML)
        run: |
          # Gera a definição .puml
          python gerador_diagrama.py
          plantuml diagrama_classes_manual.puml  # Renderiza o .puml para .png
      - name: Upload artifacts (Diagramas gerados)
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }} # Nome do artefato
          path: |
            diagrama_classes.png      # Caminho para o PNG gerado por relogio.py
            diagrama_classes.puml     # Caminho para o PlantUML gerado por relogio.py
            diagrama_classes_manual.png # Caminho para o PNG gerado por gerador_diagrama.py
            diagrama_classes_manual.puml # Caminho para o PlantUML gerado por gerador_diagrama.py
          retention-days: 30

      - name: LISTAR ARQUIVOS (Passo de Diagnóstico)
        run: ls -lR

      - name: Commit e push dos diagramas gerados
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          # ... resto do seu comando git ...
          git add .
      
      - name: Commit e push dos diagramas gerados
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Adiciona todos os arquivos de diagrama gerados
          git add .
          
          # Verifica se há algo para commitar antes de tentar
          if git diff --staged --quiet; then
            echo "Nenhuma mudança nos diagramas para commitar."
          else
            git commit -m "Auto-generated: Update class diagrams [skip ci]"
            git push
          fi
